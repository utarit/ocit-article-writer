{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","_React$useState3","_React$useState4","selectedTab","setSelectedTab","react_default","a","createElement","className","action","method","htmlFor","required","name","type","id","aria-describedby","placeholder","href","hidden","readOnly","js_default","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","onClick","tmp_val","split","join","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAMMA,eAAY,IAAIC,YAAmB,CACvCC,QAAQ,EACRC,oBAAoB,EACpBC,eAAe,EACfC,WAAW,KAsDEC,MAnDf,WAAe,IAAAC,EACaC,IAAMC,SAAS,IAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEyBP,IAAMC,SAAS,SAFxCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEOE,EAFPF,EAAA,GAIb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,QAAME,OAAO,4CAA4CC,OAAO,QAC9DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,cAAf,SACAN,EAAAC,EAAAC,cAAA,SAAOK,UAAQ,EAACC,KAAK,QAAQC,KAAK,OAAON,UAAU,eAAeO,GAAG,aAAaC,mBAAiB,YAAYC,YAAY,iBAE7HZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,UAAf,UACAN,EAAAC,EAAAC,cAAA,SAAOK,UAAQ,EAACC,KAAK,SAASC,KAAK,OAAON,UAAU,eAAeO,GAAG,SAASC,mBAAiB,YAAYC,YAAY,kBAE1HZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,WAAf,mBACAN,EAAAC,EAAAC,cAAA,SAAOK,UAAQ,EAACC,KAAK,UAAUC,KAAK,OAAON,UAAU,eAAeO,GAAG,UAAUC,mBAAiB,cAAcC,YAAY,uBAE9HZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,iBAAf,YACAN,EAAAC,EAAAC,cAAA,SAAOK,UAAQ,EAACC,KAAK,WAAWC,KAAK,OAAON,UAAU,eAAeO,GAAG,gBAAgBE,YAAY,cAEtGZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,+BAAf,mBACAN,EAAAC,EAAAC,cAAA,SAAOQ,GAAG,eAAeP,UAAU,wBAAnC,4BAAmFH,EAAAC,EAAAC,cAAA,KAAGW,KAAK,+CAAR,eACnFb,EAAAC,EAAAC,cAAA,YAAUY,QAAM,EAACC,UAAQ,EAACP,KAAK,UAAUE,GAAG,8BAA8BP,UAAU,sBAAsBT,MAAOA,IACjHM,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEP,MAAOA,EACPuB,SAAUtB,EACVG,YAAaA,EACboB,YAAanB,EACboB,wBAAyB,SAAAC,GAAQ,OAC/BC,QAAQC,QAAQzC,EAAU0C,SAASH,QAKzCpB,EAAAC,EAAAC,cAAA,UAAQsB,QAAS,WACf,IAAIC,EAAU/B,EAAMgC,MAAM,MAC1BD,EAAUA,EAAQE,KAAK,OACvBhC,EAAS8B,IAERhB,KAAK,SAASN,UAAU,mBAL3B,WAOFH,EAAAC,EAAAC,cAAA,SAAOQ,GAAG,SAASP,UAAU,yDAA7B,0BC/CcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c659105.chunk.js","sourcesContent":["import React from 'react';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport './App.css';\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\n\nfunction App() {\n  const [value, setValue] = React.useState(\"\");\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n\n  return (\n    <div className=\"p-3\">\n      <h1> OCİT Article Generator</h1>\n      <form action=\"https://formspree.io/mertakca74@gmail.com\" method=\"POST\">\n        <div className=\"form-group\">\n          <label htmlFor=\"titleInput\">Title</label>\n          <input required name=\"title\" type=\"text\" className=\"form-control\" id=\"titleInput\" aria-describedby=\"titleHelp\" placeholder=\"Enter title\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"author\">Author</label>\n          <input required name=\"author\" type=\"text\" className=\"form-control\" id=\"author\" aria-describedby=\"titleHelp\" placeholder=\"Enter author\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"picture\">Article Picture</label>\n          <input required name=\"picture\" type=\"text\" className=\"form-control\" id=\"picture\" aria-describedby=\"pictureHelp\" placeholder=\"Enter picture url\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"InputPassword\">Password</label>\n          <input required name=\"password\" type=\"text\" className=\"form-control\" id=\"InputPassword\" placeholder=\"Password\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlTextarea1\">Article Content</label>\n          <small id=\"textareaHelp\" className=\"form-text text-muted\">You can look for help at <a href=\"https://www.markdownguide.org/basic-syntax/\">this page.</a></small>\n          <textarea hidden readOnly name=\"article\" id=\"exampleFormControlTextarea1\" className=\"form-control hidden\" value={value}></textarea>\n          <ReactMde\n            value={value}\n            onChange={setValue}\n            selectedTab={selectedTab}\n            onTabChange={setSelectedTab}\n            generateMarkdownPreview={markdown =>\n              Promise.resolve(converter.makeHtml(markdown))\n            }\n          />\n        </div>\n\n        <button onClick={() => {\n          let tmp_val = value.split(\"\\n\");\n          tmp_val = tmp_val.join(\"\\\\n\");\n          setValue(tmp_val);\n          \n        }} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n      </form>\n      <small id=\"footer\" className=\"text-muted d-flex justify-content-end align-items-end\">Made by Mert Akça</small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}